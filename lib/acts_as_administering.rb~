require "acts_as_administering/engine"

module ActsAsAdministering
	def acts_as_administering(*classes_array)
		class_eval do
			
			include InstanceMethods
			include ClassMethods
		end
	end
	
	module InstanceMethods
		
		def say_i_administer
			puts "i administer!"
		end
		
		def administer(administered_thing)
			relate_to administered_thing, as: "admin"
		end
		
		def administered(thing_key)
			@owned_relationships = self.send("owned_relationships_to_"+thing_key.to_s).tagged_with('admin').all
			@ids = @owned_relationships.map(&:in_relation_to_id)
			@graph_orgs_ids = Organization.where(id: @ids).map(&:graph_id)
			unless @graph_orgs_ids.length == 0
				@graph_resource = ("Bigbee::GraphResource::" + thing_key.to_s.singularize.camelize).constantize
				@graph_resource.where(id: @graph_orgs_ids)
			else
				nil
			end
		end
		
	end
	module ClassMethods
	end
	
end

ActiveRecord::Base.extend ActsAsAdministering
